# -*- coding:utf-8 -*-
#    author    :   丁雪峰
#    time      :   2015-01-21 12:27:00
#    email     :   fengidri@yeah.net
#    version   :   1.0.1
import cPickle
import os
wbcpickle = os.path.join(os.path.dirname(__file__), 'wbtree.cpickle').replace('\\','/')
wbtxt = os.path.join(os.path.dirname(__file__), 'wubi.txt').replace('\\','/')


class StopFind(Exception):
    pass
class NotFound(Exception):
    pass

class node(dict):
    def __init__(self, ctx):
        dict.__init__(self)
        self.ctx = {} # 还要记录每一个词的使用次数
        for c in ctx:
            self.ctx[c] = 0
    def append(self, ctx):
        for c in ctx:
            self.ctx[c] = 0

    def wb_find(self, patten):
        k = patten[0]
        nt = self.get(k)
        if nt == None:
            raise NotFound 
        if len(patten) == 1:
            return nt  # 根据patten 找到当前node
        else:
            return nt.wb_find(patten[1:])

    def wb_words(self):# 返回按使用次数排序的list
        keys = self.ctx.keys()
        return sorted(keys, key=lambda x: self.ctx.get(x), reverse=True)

    def wb_wordsc(self): # 返回值带有使用次数构成dict
        return self.ctx

    def wb_associate(self):#返回值复杂, 包含有联想的key, 还有带有次数的dict
        ass = []
        for k, c  in self.items():
            for w, c in c.wb_wordsc().items():
                ass.append((w, k, c))

        return sorted(ass, key = lambda x:x[2], reverse=True)

    def addcount(self, w):
        try:
            self.ctx[w] += 1
            cPickle.dump(ROOT, open(wbcpickle, 'w'))
        except:
            pass

def tree_add(patten, words):
    fa = ROOT
    le = len(patten)
    index = 0
    for p in patten:
        index += 1
        n = fa.get(p)
        if n == None:
            if index == le:
                n = node(words)
            else:
                n = node([])
            fa[p] = n
        else:
            if index == le:
                n.append(words)
        fa = n

def read_txt():
    for line in open(wbtxt).readlines():
        line = line.decode('utf8')
        word = line.split()
        key = word[0]
        del word[0]
        tree_add(key, word)

def save():
    pid = os.fork()
    if pid == 0:
        cPickle.dump(ROOT, open(wbcpickle, 'w'))
    else:
        return


if __name__ != "__main__":
    if os.path.isfile(wbcpickle):
        ROOT = cPickle.load(open(wbcpickle))
    else:
        ROOT = node([])
        read_txt()
        cPickle.dump(ROOT, open(wbcpickle, 'w'))
else:
    print ROOT['a'].ctx
    
    print "----------------"
    print ROOT.wb_find('a').wb_words()
    print ROOT.wb_find('b').wb_words()
    print ROOT.wb_find('g').wb_words()[0]
    print ROOT.wb_find('ggt').wb_associate()

