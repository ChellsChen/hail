# -*- coding:utf-8 -*-
#    author    :   丁雪峰
#    time      :   2014-11-14 23:48:24
#    email     :   fengidri@yeah.net
#    version   :   1.0.1


import os
import logging
import time
import shutil
import json


class BlogDate(object):
    def __init__(self, WIKIPATH):
        self.indexfile = os.path.join(WIKIPATH, 'index.json')
        self.classfile = os.path.join(WIKIPATH, 'class.json')
        self.tagsfile =  os.path.join(WIKIPATH, 'tags.json')
        self.wikipath = WIKIPATH
        self.load()

    def load(self):
        self.cls = self._load(self.classfile)
        self.tags = self._load(self.tagsfile)
        self.index = self._load(self.indexfile)

    def _load(self, path):
        if os.path.isfile(path):
            logging.info("load json:%s" % path)
            return  json.load(open(path))
        else:
            logging.info("load json: error: not found!!" )

    def save(self):
        json.dump( self.index,open(self.indexfile, 'w'), sort_keys=True,indent=4)
        json.dump( self.cls,open(self.classfile, 'w'), sort_keys=True,indent=4)
        json.dump( self.tags, open(self.tagsfile, 'w'), sort_keys=True,indent=4) 

    def getchapter(self, ID):
        for info in self.index:
            if info[0] == ID:
                return Info(info, self)
        return None
    #增加一个新文章. 
    #返回文件的id
    def add(self, title, tex, html, cls='', tags=[], public=0):
        ctime = mtime = time.time()
        Id = int(time.time()) - 1416010575
    
        dirpath = os.path.join(self.wikipath, str(Id))
        if os.path.isdir(dirpath):
            logging.error('%s dupile ' % dirpath)
            return -2#duplie path
    
        self.tagadd(tags)
        self.clsadd(cls, Id)
    

        if not self.write(Id, tex, html):
            return -3
    
    
        self.index.append( [Id, title, tags, ctime, mtime, public] )
        return Id
    
    def write(self, ID, tex, html):
        dirpath = os.path.join(self.wikipath, str(ID))
    
        if not os.path.isdir(dirpath):
            try:
                os.mkdir(dirpath)
            except:
                logging.error('mkdir %s fail' % dirpath)
                return False
    
        fp = os.path.join(dirpath, 'index.mkiv')
        open(fp, 'wb').write(tex.encode('utf8'))
    
        #html = context.context2htmls(content.decode('utf8'))
        fp = os.path.join(dirpath, 'index.html')
        open(fp, 'wb').write(html.encode('utf8'))
        return True

    # 把id 增加到对应的分类中
    def clsadd(self, Id, cls):#记录新增加的tag
        if not cls:
            return
        c = self.cls.get(cls)
        if not c:
            self.cls[cls] = [Id]
        else:
            c.append(Id)
    
    def tagadd(self, tags):
        for t in tags:
            if t not in self.tags:
                self.tags.append(t)

    def clsdel(self, Id):
        for k,l in self.cls.items():
            if Id in l:
                l.remove(Id)
                if len(l) == 0:
                    del self.cls[k]

class Info(object):
    def __init__(self, info, db):
        self.info = info
        self.db = db

    def settitle(self, title):
        self.info[1] = title

    def settag(self, tags):
        self.db.tagadd(tags)
        self.info[2] = tags

    def setpublic(self, p):
        if p:
            self.info[5]   = 1
        else:
            self.info[5]   = 0

    def setcls(self, cls):
        self.db.clsdel(self.Id)
        self.db.clsadd(cls, self.Id)

    def write(self, tex, html):
        self.info[4] = time.time()
        self.db.write(self.info[0], tex, html)













